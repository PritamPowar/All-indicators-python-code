# -*- coding: utf-8 -*-
"""all indicators.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K6WMFjTaywItOYKDjeROawHtfNBzktrT
"""

pip install pandas_ta

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import datetime
import pandas_ta as ta

a=dir(ta)
print(a)

# Download the data
ticker = "^NSEI"
data = yf.download(ticker, period="1mo", interval="30m")

data.head()

# Reset the index to add the dates as a column
data_reset = data.reset_index()

print(data_reset.head())

data=data_reset[["Datetime","Open","High","Low","Close","Volume"]]
data.head()

# if you face frombole with data - you should chage date time zone .
#https://youtu.be/Qs1RwCfo8uY?si=PD885W1QjX7mVCOF  video reference

"""# ****Moving Average 20 ****


"""

#moving average  - 20
data["20_ma"]=data["Close"].rolling(window=20).mean()

data.head()

data[["Close","20_ma"]].plot(figsize=(11,5))

#20_ma having initial values nan we need to remove it
ma_data=data.dropna()

data.head()

ma_data.head()

ma_data.tail(10)

pip install pandas mplfinance

import mplfinance as mpf

df = pd.DataFrame(ma_data)
df.set_index('Datetime', inplace=True)

# Define the moving average
add_plot = [
    mpf.make_addplot(df['20_ma'], color='blue', width=1.2)
]

# Plot the candlestick chart
mpf.plot(df, type='candle', style='charles', addplot=add_plot, title='Candlestick Chart with 20-period Moving Average', ylabel='Price')

"""# **Bolinger band**"""

#Bolinger bands indicator
# middle line is 20 moving avg
#upper and lower 2 standerd deviation up and dowun from moving average

#WE all ready have# # Calculate the 20-period Simple Moving Average (SMA)
# data['SMA'] = data['Close'].rolling(window=20).mean()

# # Calculate the 20-period Standard Deviation (SD)
# data['SD'] = data['Close'].rolling(window=20).std()
# directly calculating into UB and LB


# Calculate the Upper Bollinger Band (UB) and Lower Bollinger Band (LB)
data['UB'] = data['20_ma'] + 2 * data['Close'].rolling(window=20).std()
data['LB'] = data['20_ma'] - 2 * data['Close'].rolling(window=20).std()

data.head()

BB_Data=data.dropna()

data.head()

BB_Data.head()

BB_Data[["UB","LB","20_ma","Close"]].plot(figsize=(11,5))

df = pd.DataFrame(BB_Data)
df.set_index('Datetime', inplace=True)

# Define the moving average
add_plot = [
    mpf.make_addplot(df['20_ma'], color='blue', width=1.2),
    mpf.make_addplot(df['UB'], color='red', width=1.2),
    mpf.make_addplot(df['LB'], color='green', width=1.2)
]

# Plot the candlestick chart
mpf.plot(df, type='candle', style='charles', addplot=add_plot, title='Candlestick Chart Bolinger Band', ylabel='Price')

"""# **Super trend**"""

#Super trend
help(ta.supertrend)

data.head()

s_t= ta.supertrend(data['High'],data['Low'],data['Close'],length=10,multiplier=3)

s_t.head()

s_t.tail()

data= pd.concat([data,s_t["SUPERT_10_3.0"]],axis=1)

data.head()

# # Convert 'Datetime' column to datetime if it's not already in datetime format
# data['Datetime'] = pd.to_datetime(data['Datetime'])
# data.set_index('Datetime', inplace=True)

data.head()

# prompt: % count of na values

data.isna().sum()

s_t_data=data.dropna()

s_t_data.head()

s_t_data[["Close","SUPERT_10_3.0"]].plot(figsize=(11,6))

s_t_data['Datetime'] = pd.to_datetime(s_t_data['Datetime'])

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(s_t_data['Datetime'], s_t_data['Close'], label='Close Price', color='blue', marker='o')
plt.plot(s_t_data['Datetime'], s_t_data['SUPERT_10_3.0'], label='Supertrend', color='red', linestyle='--')

# Formatting the plot
plt.title('Close Prices and Supertrend Line')
plt.xlabel('Datetime')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()  # Adjusts plot to fit labels

# Show plot
plt.show()

s_t_data.head()

df = pd.DataFrame(s_t_data)
df.set_index('Datetime', inplace=True)

# Define the moving average
add_plot = [
    mpf.make_addplot(df['20_ma'], color='blue', width=1.2),
    mpf.make_addplot(df['UB'], color='red', width=1.2),
    mpf.make_addplot(df['LB'], color='green', width=1.2),
    mpf.make_addplot(df['SUPERT_10_3.0'], color='orange', width=1.2)
]

# Plot the candlestick chart
mpf.plot(df, type='candle', style='charles', addplot=add_plot, title='Candlestick Chart', ylabel='Price')

"""# **Relative Strength Index RSI**"""

# RSI Relative Strength Index
# avg gain and avg looses
#the RSI oscillates between zero and 100.
# we can use ta lab for this also

data.head()

# data["Gain"] = data["Close"] - data["Open"].apply(lambda x: x if x > 0 else 0)
# data["Loss"] = data["Close"] - data["Open"].apply(lambda x: -x if x < 0 else 0)

# data["avg_gain"]= data["Gain"].rolling(window=14).mean()
# data["avg_loss"]= data["Loss"].rolling(window=14).mean()

# RSI_data=data.dropna()

data.head()

data.tail()

data['RSI'] = ta.rsi(data['Close'])

data.head()

data.tail()

rsi_data=data.dropna()

rsi_data.head()

# Plot
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 8), sharex=True)

# Plot Close prices
ax1.plot(rsi_data.index, rsi_data['Close'], label='Close', color='blue')
ax1.set_ylabel('Close Price')
ax1.set_title(f'{ticker} - Close Price and RSI')
ax1.legend(loc='upper left')

# Plot RSI
ax2.plot(rsi_data.index, rsi_data['RSI'], label='RSI', color='red')
ax2.axhline(70, linestyle='--', color='gray', alpha=0.7)
ax2.axhline(30, linestyle='--', color='gray', alpha=0.7)
ax2.set_ylabel('RSI')
ax2.set_xlabel('Date')
ax2.legend(loc='upper left')

# Show the plot
plt.tight_layout()
plt.show()

# plot candle stick with rsi

"""# **MACD**"""

#MACD
#https://youtu.be/JzdVPnCSSuo?si=4_6AODC3rbOCK0UM video link

data.head()

macd = ta.macd(data['Close'])
data = data.join(macd)

data.head()

data.tail()

macd_data=data.dropna()



data.head()

print(type(data.index))

if not isinstance(data.index, pd.DatetimeIndex):
    data.index = pd.to_datetime(data.index)

# Verify conversion
print(type(data.index))  #

# Create additional plots with correct column names
macd_plot = mpf.make_addplot(data['MACD_12_26_9'], panel=1, color='blue', title='MACD')
signal_plot = mpf.make_addplot(data['MACDs_12_26_9'], panel=1, color='red')
histogram_plot = mpf.make_addplot(data['MACDh_12_26_9'], panel=1, type='bar', color='green', alpha=0.5)

# Plot candlestick chart with MACD
mpf.plot(data, type='candle', addplot=[macd_plot, signal_plot, histogram_plot], volume=True, title=f'Candlestick Chart with MACD for {ticker}', ylabel='Price', ylabel_lower='MACD')

# all indicater function together Check it once
def indicators(data):
    # moving avg
    data["20_ma"]=data["Close"].rolling(window=20).mean()
    #bolinger band
    data['UB'] = data['20_ma'] + 2 * data['Close'].rolling(window=20).std()
    data['LB'] = data['20_ma'] - 2 * data['Close'].rolling(window=20).std()
    #super trend
    s_t = ta.supertrend(data['High'],data['Low'],data['Close'],length=10,multiplier=3)
    data= pd.concat([data,s_t["SUPERT_10_3.0"]],axis=1)
    #relative strength index
    data['RSI'] = ta.rsi(data['Close'])
    #MACD
    macd = ta.macd(data['Close'])
    data = data.join(macd)
    return data